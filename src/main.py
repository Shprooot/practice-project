import telebot
from telebot import types
import requests
import os
from dotenv import load_dotenv

load_dotenv()

TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
KINOPOISK_API_KEY = os.getenv("KINOPOISK_API_KEY")

bot = telebot.TeleBot(TOKEN)

# –ê–∫—Ç—É–∞–ª—å–Ω—ã–µ –∂–∞–Ω—Ä—ã –¥–ª—è API –ö–∏–Ω–æ–ø–æ–∏—Å–∫–∞
GENRES = {
    "–±–æ–µ–≤–∏–∫": "–±–æ–µ–≤–∏–∫",
    "—Ñ–∞–Ω—Ç–∞—Å—Ç–∏–∫–∞": "—Ñ–∞–Ω—Ç–∞—Å—Ç–∏–∫–∞",
    "–¥—Ä–∞–º–∞": "–¥—Ä–∞–º–∞",
    "–∫–æ–º–µ–¥–∏—è": "–∫–æ–º–µ–¥–∏—è",
    "—Ç—Ä–∏–ª–ª–µ—Ä": "—Ç—Ä–∏–ª–ª–µ—Ä",
    "—É–∂–∞—Å—ã": "—É–∂–∞—Å—ã",
    "–¥–µ—Ç–µ–∫—Ç–∏–≤": "–¥–µ—Ç–µ–∫—Ç–∏–≤",
    "—Ñ—ç–Ω—Ç–µ–∑–∏": "—Ñ—ç–Ω—Ç–µ–∑–∏",
    "–º–µ–ª–æ–¥—Ä–∞–º–∞": "–º–µ–ª–æ–¥—Ä–∞–º–∞",
    "–∫—Ä–∏–º–∏–Ω–∞–ª": "–∫—Ä–∏–º–∏–Ω–∞–ª"
}


@bot.message_handler(commands=['start'])
def start(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
    btn1 = types.KeyboardButton("üé≠ –¢–æ–ø –ø–æ –∂–∞–Ω—Ä—É")
    btn2 = types.KeyboardButton("üìÖ –¢–æ–ø –ø–æ –≥–æ–¥—É")
    btn3 = types.KeyboardButton("üîç –ü–æ–∏—Å–∫ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é")
    markup.add(btn1, btn2, btn3)

    bot.send_message(
        message.chat.id,
        "üé¨ –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:\n"
        "‚Ä¢ –¢–æ–ø-3 —Ñ–∏–ª—å–º–æ–≤ –ø–æ –∂–∞–Ω—Ä—É\n"
        "‚Ä¢ –¢–æ–ø-3 —Ñ–∏–ª—å–º–æ–≤ –ø–æ –≥–æ–¥—É\n"
        "‚Ä¢ –ü–æ–∏—Å–∫ –ø–æ —Ç–æ—á–Ω–æ–º—É –Ω–∞–∑–≤–∞–Ω–∏—é",
        reply_markup=markup
    )


def search_movies(params):
    url = "https://api.kinopoisk.dev/v1.4/movie"
    headers = {"X-API-KEY": KINOPOISK_API_KEY}
    try:
        response = requests.get(url, headers=headers, params=params, timeout=10)
        response.raise_for_status()
        return response.json().get("docs", [])
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ API: {e}")
        return []


def show_movie_details(chat_id, movie):
    title = movie.get("name", "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è")
    year = movie.get("year", "N/A")
    rating = movie.get("rating", {}).get("imdb", "N/A")

    # –û—á–∏—Å—Ç–∫–∞ –æ–ø–∏—Å–∞–Ω–∏—è –æ—Ç –ª–∏—à–Ω–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤
    description = movie.get("description", "")
    if description:
        # –£–¥–∞–ª—è–µ–º HTML-—Ç–µ–≥–∏ –∏ –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã
        import re
        description = re.sub(r'<[^>]+>', '', description)  # –£–¥–∞–ª—è–µ–º HTML-—Ç–µ–≥–∏
        description = re.sub(r'\s+', ' ', description).strip()  # –£–¥–∞–ª—è–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã
        description = description[:400]  # –û–±—Ä–µ–∑–∞–µ–º –¥–ª–∏–Ω–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ
    else:
        description = "–û–ø–∏—Å–∞–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç"

    text = (
        f"üé• <b>{title}</b> ({year})\n"
        f"‚≠ê –†–µ–π—Ç–∏–Ω–≥ IMDB: <b>{rating}</b>\n"
        f"üìñ –û–ø–∏—Å–∞–Ω–∏–µ: {description}\n"
        f"üé≠ –ñ–∞–Ω—Ä—ã: {', '.join(g['name'] for g in movie.get('genres', []))}"
    )

    keyboard = types.InlineKeyboardMarkup()
    keyboard.add(types.InlineKeyboardButton(
        "–°–º–æ—Ç—Ä–µ—Ç—å –Ω–∞ –ö–∏–Ω–æ–ø–æ–∏—Å–∫–µ",
        url=f"https://www.kinopoisk.ru/film/{movie['id']}/"
    ))

    if movie.get("poster", {}).get("url"):
        bot.send_photo(chat_id, movie["poster"]["url"],
                       caption=text,
                       reply_markup=keyboard,
                       parse_mode='HTML')
    else:
        bot.send_message(chat_id, text,
                         reply_markup=keyboard,
                         parse_mode='HTML')


@bot.message_handler(func=lambda message: message.text == "üé≠ –¢–æ–ø –ø–æ –∂–∞–Ω—Ä—É")
def ask_genre(message):
    markup = types.InlineKeyboardMarkup(row_width=2)
    for genre in GENRES:
        markup.add(types.InlineKeyboardButton(genre, callback_data=f"genre_{genre}"))
    bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –∂–∞–Ω—Ä –¥–ª—è –ø–æ–∏—Å–∫–∞ —Ç–æ–ø-3:", reply_markup=markup)


@bot.callback_query_handler(func=lambda call: call.data.startswith('genre_'))
def handle_genre(call):
    genre = call.data.split('_')[1]
    bot.answer_callback_query(call.id, f"‚åõ –ò—â–µ–º —Ç–æ–ø –≤ –∂–∞–Ω—Ä–µ {genre}...")

    params = {
        "genres.name": genre,
        "type": "movie",  # –¢–æ–ª—å–∫–æ —Ñ–∏–ª—å–º—ã (–Ω–µ —Å–µ—Ä–∏–∞–ª—ã)
        "rating.kp": "7-10",  # –§–∏–ª—å—Ç—Ä—É–µ–º –ø–æ —Ä–µ–π—Ç–∏–Ω–≥—É –ö–∏–Ω–æ–ø–æ–∏—Å–∫–∞
        "sortField": "votes.kp",  # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –æ—Ü–µ–Ω–æ–∫
        "sortType": "-1",
        "limit": 20  # –ë–µ—Ä–µ–º –±–æ–ª—å—à–µ –¥–ª—è —Ä—É—á–Ω–æ–π —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏
    }

    try:
        response = requests.get(
            "https://api.kinopoisk.dev/v1.4/movie",
            headers={"X-API-KEY": KINOPOISK_API_KEY},
            params=params,
            timeout=15
        )
        response.raise_for_status()
        movies = response.json().get("docs", [])

        # –†—É—á–Ω–∞—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ IMDB —Ä–µ–π—Ç–∏–Ω–≥—É
        movies_sorted = sorted(
            [m for m in movies if m.get("rating", {}).get("imdb")],
            key=lambda x: x["rating"]["imdb"],
            reverse=True
        )[:3]  # –ë–µ—Ä–µ–º —Ç–æ–ø-3

        if not movies_sorted:
            bot.send_message(call.message.chat.id,
                             f"–§–∏–ª—å–º—ã –≤ –∂–∞–Ω—Ä–µ '{genre}' —Å —Ä–µ–π—Ç–∏–Ω–≥–æ–º IMDB –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            return

        for movie in movies_sorted:
            show_movie_details(call.message.chat.id, movie)

    except Exception as e:
        print(f"API Error: {e}")
        bot.send_message(call.message.chat.id,
                         "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")


@bot.message_handler(func=lambda message: message.text == "üìÖ –¢–æ–ø –ø–æ –≥–æ–¥—É")
def ask_year(message):
    msg = bot.send_message(
        message.chat.id,
        "–í–≤–µ–¥–∏—Ç–µ –≥–æ–¥ –≤—ã–ø—É—Å–∫–∞ (–æ—Ç 1900 –¥–æ 2024):",
        reply_markup=types.ForceReply(selective=False)
    )
    bot.register_next_step_handler(msg, process_year)


def process_year(message):
    try:
        year = int(message.text)
        if 1900 <= year <= 2024:
            # –ü–µ—Ä–≤—ã–π –∑–∞–ø—Ä–æ—Å: –ø–æ–ª—É—á–∞–µ–º ID —Å–∞–º—ã—Ö –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö —Ñ–∏–ª—å–º–æ–≤ –≥–æ–¥–∞
            params_popular = {
                "year": year,
                "type": "movie",
                "sortField": "votes.kp",
                "sortType": "-1",
                "limit": 50
            }

            response = requests.get(
                "https://api.kinopoisk.dev/v1.4/movie",
                headers={"X-API-KEY": KINOPOISK_API_KEY},
                params=params_popular,
                timeout=10
            )

            movies = response.json().get("docs", [])

            if not movies:
                bot.send_message(message.chat.id, f"–§–∏–ª—å–º—ã {year} –≥–æ–¥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
                return

            # –§–∏–ª—å—Ç—Ä—É–µ–º —Ñ–∏–ª—å–º—ã —Å —Ä–µ–π—Ç–∏–Ω–≥–æ–º IMDB
            movies_with_rating = [
                m for m in movies
                if m.get("rating") and m["rating"].get("imdb")
            ]

            if not movies_with_rating:
                bot.send_message(
                    message.chat.id,
                    f"–§–∏–ª—å–º—ã {year} –≥–æ–¥–∞ –µ—Å—Ç—å, –Ω–æ —É –Ω–∏—Ö –Ω–µ—Ç —Ä–µ–π—Ç–∏–Ω–≥–∞ IMDB"
                )
                return

            # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —Ä–µ–π—Ç–∏–Ω–≥—É IMDB –∏ –±–µ—Ä–µ–º —Ç–æ–ø-3
            top_movies = sorted(
                movies_with_rating,
                key=lambda x: x["rating"]["imdb"],
                reverse=True
            )[:3]

            for movie in top_movies:
                show_movie_details(message.chat.id, movie)

        else:
            bot.send_message(
                message.chat.id,
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≥–æ–¥ –º–µ–∂–¥—É 1900 –∏ 2024"
            )

    except ValueError:
        bot.send_message(
            message.chat.id,
            "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≥–æ–¥–∞. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ, –Ω–∞–ø—Ä–∏–º–µ—Ä: 2010"
        )
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –ø–æ –≥–æ–¥—É: {e}")
        bot.send_message(
            message.chat.id,
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        )


@bot.message_handler(func=lambda message: message.text == "üîç –ü–æ–∏—Å–∫ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é")
def ask_movie_title(message):
    msg = bot.send_message(
        message.chat.id,
        "üé¨ –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ñ–∏–ª—å–º–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä: '–ò–Ω—Ç–µ—Ä—Å—Ç–µ–ª–ª–∞—Ä' –∏–ª–∏ 'The Matrix'):",
        reply_markup=types.ForceReply(selective=True)
    )
    bot.register_next_step_handler(msg, process_movie_title)


def process_movie_title(message):
    try:
        search_query = message.text.strip()
        if len(search_query) < 2:
            bot.send_message(message.chat.id, "‚ùå –°–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π –∑–∞–ø—Ä–æ—Å. –í–≤–µ–¥–∏—Ç–µ –º–∏–Ω–∏–º—É–º 2 —Å–∏–º–≤–æ–ª–∞")
            return

        # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞
        search_params = {
            "query": search_query,
            "limit": 5,
            "selectFields": ["name", "alternativeName", "year", "rating", "poster", "id"],
            "type": "movie",
            "isStrict": False
        }

        response = requests.get(
            "https://api.kinopoisk.dev/v1.4/movie/search",
            headers={"X-API-KEY": KINOPOISK_API_KEY},
            params=search_params,
            timeout=15
        )
        response.raise_for_status()

        data = response.json()
        movies = data.get("docs", [])

        if not movies:
            bot.send_message(
                message.chat.id,
                f"‚ùå –§–∏–ª—å–º—ã –ø–æ –∑–∞–ø—Ä–æ—Å—É '{search_query}' –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.\n"
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ:\n"
                "- –£—Ç–æ—á–Ω–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ\n"
                "- –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ\n"
                "- –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ—Ä—Ñ–æ–≥—Ä–∞—Ñ–∏—é"
            )
            return

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤
        markup = types.InlineKeyboardMarkup()
        for idx, movie in enumerate(movies[:5], 1):  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º 5 —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
            title = movie.get("name") or movie.get("alternativeName") or "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è"
            year = movie.get("year", "")
            btn_text = f"{idx}. {title} ({year})" if year else f"{idx}. {title}"

            markup.add(types.InlineKeyboardButton(
                btn_text,
                callback_data=f"select_{movie['id']}"
            ))

        bot.send_message(
            message.chat.id,
            f"üîç –ù–∞–π–¥–µ–Ω–æ {len(movies)} –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤:",
            reply_markup=markup
        )

    except requests.exceptions.RequestException as e:
        print(f"–û—à–∏–±–∫–∞ API: {str(e)}")
        bot.send_message(
            message.chat.id,
            "‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å —Å–µ—Ä–≤–µ—Ä–æ–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        )
    except Exception as e:
        print(f"–û–±—â–∞—è –æ—à–∏–±–∫–∞: {str(e)}")
        bot.send_message(
            message.chat.id,
            "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π –∑–∞–ø—Ä–æ—Å."
        )


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —Ñ–∏–ª—å–º–∞
@bot.callback_query_handler(func=lambda call: call.data.startswith('select_'))
def handle_movie_selection(call):
    try:
        movie_id = call.data.split('_')[1]

        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∏–ª—å–º–µ
        response = requests.get(
            f"https://api.kinopoisk.dev/v1.4/movie/{movie_id}",
            headers={"X-API-KEY": KINOPOISK_API_KEY},
            timeout=10
        )
        response.raise_for_status()

        movie = response.json()
        show_movie_details(call.message.chat.id, movie)

    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∏–ª—å–º–∞: {str(e)}")
        bot.send_message(
            call.message.chat.id,
            "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∏–ª—å–º–µ"
        )


if __name__ == '__main__':
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")
    bot.infinity_polling(timeout=60)